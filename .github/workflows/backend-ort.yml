name: backend-ort

on:
  pull_request:
    paths-ignore:
      - "demo/**"
      - "tools/**"
      - "docs/**"

env:
  PIP_PRE: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_ort:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install onnxruntime
        run: |
          wget https://github.com/microsoft/onnxruntime/releases/download/v1.8.1/onnxruntime-linux-x64-1.8.1.tgz
          tar -zxvf onnxruntime-linux-x64-1.8.1.tgz
          export ONNXRUNTIME_DIR=${PWD}/onnxruntime-linux-x64-1.8.1
          export LD_LIBRARY_PATH=$ONNXRUNTIME_DIR/lib:$LD_LIBRARY_PATH
      - name: Install mmdeploy dependencies
        run: |
          python -m pip install torch==2.5.1 torchvision onnxruntime==1.8.1
          python -m pip install onedl-mmcv onedl-mim
      - name: Install mmdeploy with ort backend
        run: |
          mkdir -p build && pushd build
          cmake -DMMDEPLOY_BUILD_SDK=ONE -DMMDEPLOY_BUILD_EXAMPLES=ON -DMMDEPLOY_BUILD_SDK_PYTHON_API=ON-DMMDEPLOY_TARGET_DEVICES=cpu -DMMDEPLOY_TARGET_BACKENDS=ort -DONNXRUNTIME_DIR=${ONNXRUNTIME_DIR} ..
          make -j2 && make install
          uv pip install -e .
          python3 tools/check_env.py
          python -c 'import mmdeploy.apis.onnxruntime as ort_api; assert ort_api.is_available(with_custom_ops=True)'
      - name: test mmpretrain full pipeline
        run: |
          python -m mim install onedl-mmpretrain
          export MMDEPLOY_DIR=$(pwd)
          bash .github/scripts/linux/test_full_pipeline.sh ort cpu
